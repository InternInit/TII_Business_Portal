input CreateInternAssocInput {
  assocId: String!
  businessId: String
  internId: String
}

input CreateInternInput {
  Id: String!
  version: Int
  formData: AWSJSON
}

input DeleteInternAssocInput {
  assocId: String!
}

input DeleteInternInput {
  Id: String!
}

type Feedback {
  comment: String
  date: String
  Id: String
  isFinished: Boolean
  isRead: Boolean
}

type Grade {
  additionalComments: String
  assessment: AWSJSON
  dueDate: String
  finishedDate: String
  Id: String
  isFinished: Boolean
  type: String
}

type Hour {
  date: String
  dueDate: String
  Id: String
  isApproved: Boolean
  time: Float
}

type Intern {
  Id: String!
  version: Int
  formData: AWSJSON
}

type InternAssoc {
  assocId: String!
  businessId: String
  internId: String
  feedback: [Feedback]
  grades: [Grade]
  hours: [Hour]
  school: School
  status: String
}

type InternAssocConnection {
  items: [InternAssoc]
  nextToken: String
}

type InternConnection {
  items: [Intern]
  nextToken: String
}

type InternData {
  Id: String!
  version: Int
  formData: AWSJSON
  feedback: [Feedback]
  grades: [Grade]
  hours: [Hour]
  school: School
  status: String
}

type Mutation {
  createIntern(input: CreateInternInput!): Intern
  updateIntern(input: UpdateInternInput!): Intern
  deleteIntern(input: DeleteInternInput!): Intern
  createInternAssoc(input: CreateInternAssocInput!): InternAssoc
  updateInternAssoc(input: UpdateInternAssocInput!): InternAssoc
  deleteInternAssoc(input: DeleteInternAssocInput!): InternAssoc
}

type Query {
  getIntern(Id: String!): Intern
  listInterns(
    filter: TableInternFilterInput
    limit: Int
    nextToken: String
  ): InternConnection
  getInternAssoc(assocId: String!): InternAssoc
  listInternAssocs(
    filter: TableInternAssocFilterInput
    limit: Int
    nextToken: String
  ): InternAssocConnection
  queryInternAssocsByBusinessIdIndex(
    businessId: String!
    first: Int
    after: String
  ): InternAssocConnection
  queryInternAssocsByInternIdIndex(
    internId: String!
    first: Int
    after: String
  ): InternAssocConnection
  getInternData(internId: String!, businessId: String!): InternData
  getInterns(businessId: String!): [InternData]
}

type School {
  address: String
  counselorName: String
  email: String
  name: String
  phone: String
  state: String
}

type Subscription {
  onCreateIntern(Id: String, version: Int, formData: AWSJSON): Intern
    @aws_subscribe(mutations: ["createIntern"])
  onUpdateIntern(Id: String, version: Int, formData: AWSJSON): Intern
    @aws_subscribe(mutations: ["updateIntern"])
  onDeleteIntern(Id: String, version: Int, formData: AWSJSON): Intern
    @aws_subscribe(mutations: ["deleteIntern"])
  onCreateInternAssoc(
    assocId: String
    businessId: String
    internId: String
  ): InternAssoc @aws_subscribe(mutations: ["createInternAssoc"])
  onUpdateInternAssoc(
    assocId: String
    businessId: String
    internId: String
  ): InternAssoc @aws_subscribe(mutations: ["updateInternAssoc"])
  onDeleteInternAssoc(
    assocId: String
    businessId: String
    internId: String
  ): InternAssoc @aws_subscribe(mutations: ["deleteInternAssoc"])
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableInternAssocFilterInput {
  assocId: TableStringFilterInput
  businessId: TableStringFilterInput
  internId: TableStringFilterInput
}

input TableInternFilterInput {
  Id: TableStringFilterInput
  version: TableIntFilterInput
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input UpdateInternAssocInput {
  assocId: String!
  businessId: String
  internId: String
}

input UpdateInternInput {
  Id: String!
  version: Int
  formData: AWSJSON
}
